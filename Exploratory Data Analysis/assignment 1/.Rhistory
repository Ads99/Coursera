class(cbind(x,y))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2
x + y
x <- c(3, 5, 1, 10, 12, 6)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
!(5 == 7)
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_Vect)
class(cls_vect)
0
info()
main()
quit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
class(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
quit()
library(swirl)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch_country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, !(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_is == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread()
?spread
gather(students3, class, grade, class1:class5, na.rm = TRUE)
spread(gather(students3, class, grade, class1:class5, na.rm = TRUE), test, value)
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
spread(gather(students3, class, grade, class1:class5, na.rm = TRUE), test, grade)
mutate(spread(gather(students3, class, grade, class1:class5, na.rm = TRUE), test, grade), class = extract_numeric(class))
submit()
submit()
skip()
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed < passed %>% mutate(status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
?separate
submit()
?group_by
submit()
submit()
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
str(airquality)
airquality <- transform(airquality, Month = factor(Month))
str(airquality)
?transform
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality) ## Nothing happens
print(p)
xyplot(Ozone ~ Wind, data = airquality) ## Auto-printing
set.seed(10)
x <- rnorm(100)
x
f <- rep(0:1, each = 50)
f
y <- x + f - f * x + rnorm(100, sd = 0.5)
y
f <- factor(f, labels = c("Group 1", "Group 2"))
f
xyplot(y ~ x)
xyplot(y ~ x | f, layout = c(2,1))
x
f
test <- rep(c("Group 1", "Group 2", each = 50)
test <- rep(c("Group 1", "Group 2"), each = 50)
test
test <- rep(factor(c("Group 1", "Group 2")), each = 50)
test
f
f <- rep(0:1, each = 50)
f
x
hist(rnorm(100))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100))
par(mfrow = c(2, 1))
par(mfrow = c(2, 1))
set.seed(10)
hist(rnorm(100))
hist(rnorm(100, sd = 0.5))
par(mfrow = c(2, 1))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100, sd = 0.5))
par(mfrow = c(2, 1))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100, sd = 0.5))
par(mfrow = c(2, 1))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100, sd = 0.5))
par(mfrow = c(2, 1))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100, sd = 0.5))
par(mfrow = c(3, 1))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100, sd = 0.5))
set.seed(10)
hist(rnorm(100, sd = 1))
par(mfrow = c(3, 1))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100, sd = 0.5))
set.seed(10)
hist(rnorm(100, sd = 1))
par(mfrow = c(3, 1))
set.seed(10)
hist(rnorm(100))
set.seed(10)
hist(rnorm(100, sd = 0.5))
set.seed(10)
hist(rnorm(100, sd = 1))
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
library(ggplot2)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv) # fill with different colours based on drv variable
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(hwy, data = mpg, facets = drv~.)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = "density")
qplot(displ, hwy, data = mpg, geom = "density")
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, geom = "density")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = "
")"
"")
qplot(displ, hwy, data = mpg, geom = "")
qplot(displ, hwy, data = mpg, geom = c("density"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
str(mpg)
qplot(displ, hwy, data = mpg, color = model)
qplot(displ, hwy, data = mpg, color = year)
qplot(displ, hwy, data = mpg, color = year, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, color = year, geom = c("point", "smooth"), method = "lm")
qplot(displ, hwy, data = mpg, color = trans, geom = c("point", "smooth"), method = "lm")
qplot(displ, hwy, data = mpg, color = fl, geom = c("point", "smooth"), method = "lm")
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"), method = "lm")
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"), method = "lm", facets = .~drv)
str(mpg)
qplot(displ, hwy, data = mpg, facets = .~drv, geom = c("point", "smooth"), method = "lm")
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"), method = "lm", facets = .~drv)
qplot(displ, hwy, data = mpg, facets = .~drv, geom = c("point", "smooth"), method = "lm")
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"), method = "lm", facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
print(g)
p <- g + geom_point()
print(p)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth() # or
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth() # or
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + facet_grid(.~drv) + geom_smooth(method = "lm") # Linear model
g + geom_point()
g + geom_point(color = "steelblue", size = 4, alpha = 1/2)
g + geom_point(aes(color = bmicat), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2) + labs(titlew = "Analysis of Displacement vs Hwy by Drive Type") +
labs(x = expression("log " * PM[2.5]), y = "Hwy")
## Customising the Smooth
g + geom_point(aes(color = drv), size = 4, alpha = 1/2) +
labs(titlew = "Analysis of Displacement vs Hwy by Drive Type") +
labs(x = expression("log " * PM[2.5]), y = "Hwy") +
geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv))
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat
testdat[50, 2] <- 100 ## Outlier
plot(testdat$x, testdat$y, type = "l", ylim = c(-3, 3))
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
str(mpg)
str(mpg$cty)
cutpoints <- quantile(mpg$cty, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
library(lattice)
library(datasets)
library(ggplot2)
?seq
seq(0, 1, length = 4)
seq(0, 1, length = 3)
seq(0, 1, length = 1)
seq(0, 1, length = 2)
?quantile
quantile(mpg$cty)
seq(0, 1, 0.25)
quantile(mpg$cty, seq(0, 1, 0.25))
cutpoints <- quantile(mpg$cty, seq(0, 1, length = 4), na.rm = TRUE)
quantile(mpg$cty, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints <- quantile(mpg$cty, seq(0, 1, 0.25), na.rm = TRUE)
cutpoints
mpg
str(mpg)
mpg$cty_new <- cut(mpg$cty, cutpoints)
str(mpg)
levels(mpg$cty_new)
?aes
g <- ggplot(mpg, aes(displ, hwy))
print(g)
g + geom_point(alpha = 1/3)
str(mpg)
## Add layers
g + geom_point(alpha = 1/3)
+ facet_wrap(drv ~ cty_new, nrow = 3, ncol = 4)
g + geom_point(alpha = 1/3)
+ facet_wrap(drv ~ cty_new, nrow = 3, ncol = 4)
g + geom_point(alpha = 1/3)
+ facet_wrap(drv ~ cty_new)
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new)
## Add layers
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new, nrow = 3, ncol = 4)
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new, nrow = 5, ncol = 4)
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new, nrow = 3, ncol = 5)
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new) +
geom_smooth(method = "lm", se=FALSE, col="steelblue")
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new) +
geom_smooth(method = "lm", se=FALSE, col="steelblue") +
theme_bw(base_family = "Avenir", base_size = 10)
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new) +
geom_smooth(method = "lm", se=FALSE, col="steelblue") +
theme_bw(base_family = "Avenir", base_size = 10) +
labs(x = "displacement") +
labs(y = "hwy") +
labs(title = "My fancy graph")
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new) +
geom_smooth(method = "lm", se=FALSE, col="steelblue") +
theme_bw(base_family = "Arial", base_size = 10) +
labs(x = "displacement") +
labs(y = "hwy") +
labs(title = "My fancy graph")
warningS()
warnings()
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new) +
geom_smooth(method = "lm", se=FALSE, col="steelblue") +
theme_bw(base_family = "Helvetica", base_size = 10) +
labs(x = "displacement") +
labs(y = "hwy") +
labs(title = "My fancy graph")
g + geom_point(alpha = 1/3) +
facet_wrap(drv ~ cty_new) +
geom_smooth(method = "lm", se=FALSE, col="steelblue") +
theme_bw(base_family = "Avenir", base_size = 10) +
labs(x = "displacement") +
labs(y = "hwy") +
labs(title = "My fancy graph")
list.files("exdata-data-NEI_data")
setwd('C:/Users/ABaker/Documents/GitHub/Coursera/Exploratory Data Analysis/assignment 2')
list.files("exdata-data-NEI_data")
NEI <- readRDS("exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("exdata-data-NEI_data/Source_Classification_Code.rds")
str(NEI)
str(SCC)
mergedData = merge(NEI, SCC, by.x="SCC", by.y="SCC", all = TRUE) # all=TRUE includes NAs like a full outer join
head(mergedData)
rm(NEI)
rm(SCC)
mergedData[,"year"] = as.factor(mergedData[,"year"])
str(mergedData)
mergedData[,"Pollutant"] = as.factor(mergedData[,"Pollutant"])
str(mergedData$Pollutant)
plot(mergedData$year, mergedData$Emissions)
plot(mergedData$year, mergedData$Emissions)
plot(mergedData$year, mergedData$Emissions, type='l')
barplot(mergedData$Emissions, names.arg = mergedData$year)
setwd('C://Users//ABaker//Documents//GitHub//Coursera//Exploratory Data Analysis//assignment 1')
x
rm(mergedData)
setwd('C://Users//ABaker//Documents//GitHub//Coursera//Exploratory Data Analysis//assignment 1')
features <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, na.strings = "?")
str(features)
x <- paste(features[, "Date"], features[,"Time"])
x
x <- strptime(x, "%d/%m/%Y %H:%M:%S")
features[,"DateTime"] = as.POSIXct(x)
features[,"Date"] = as.Date(features[,"Date"], format="%d/%m/%Y")
str(features)
features <- features[ which(features$Date == "2007-02-01" | features$Date == "2007-02-02"),]
table(features$Date)
summary(features)
rm(x)
boxplot(features$Global_active_power, col="blue")
hist(features$Global_active_power, col = "green")
rug(features$Global_active_power)
hist(features$Global_active_power, col = "green", breaks = 100)
rug(features$Global_active_power)
boxplot(features$Global_active_power, col = "blue")
abline(h = 4)
hist(features$Global_active_power, col = "green")
abline(v = 4, lwd = 2)
abline(v = median(features$Global_active_power), col = "magenta", lwd = 4)
barplot(table(features$Date), col = "wheat", main = "Number of responses by Date")
?barplot
table(features$Date)
barplot(table(features$Date), col = "wheat", main = "Number of responses by Date")
