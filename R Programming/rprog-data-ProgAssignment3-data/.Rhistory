# required rank
setkey(dat.table, State, Rank)
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
x <- 1
}
if(num == "worst") {
dat.table[, Rank :=.N:1, by = State]
x <- 1
}
else {
x <- num
}
dat.table[.(states.list, x), .(Hospital.Name, State)]
}
tail(rankall("pneumonia", "worst"), 3)
dat.table
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure", 4), 10)
head(rankall("heart attack", 20), 10)
tail(rankall("heart failure", 4), 10)
rankall("heart attack", 20)
rankall("heart failure", 20)
rankall("heart attack", 10)
rankall("heart failure", 10)
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
colID = 4
states.list <- unique(dat$State)
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
library(data.table)
dat.table <- data.table(dat.filtered)
dat.table
setnames(dat.table, 3, "Count")
dat.table
setkey(dat.table, State, Count, Hospital.Name)
dat.table[, Rank :=1:.N, by = State]
setkey(dat.table, State, Rank)
dat.table[, Rank :=.N:1, by = State]
x <- 1
dat.table[.(states.list, x), .(Hospital.Name, State)]
x <- 1
dat.table[.(states.list, x), .(Hospital.Name, State)]
setkey(dat.table, State, Rank)
dat.table[.(states.list, x), .(Hospital.Name, State)]
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, State, Count, Hospital.Name)
dat.table[, Rank :=1:.N, by = State]
# Finally, use the num defined in the function to get the hospital for each
# required rank
setkey(dat.table, State, Rank)
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
x <- 1
}
if(num == "worst") {
dat.table[, Rank :=.N:1, by = State]
x <- 1
}
else {
x <- num
}
dat.table[.(states.list, x), .(Hospital.Name, State)]
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, State, Count, Hospital.Name)
dat.table[, Rank :=1:.N, by = State]
# Finally, use the num defined in the function to get the hospital for each
# required rank
setkey(dat.table, State, Rank)
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
x <- 1
}
if(num == "worst") {
dat.table[, Rank :=.N:1, by = State]
setkey(dat.table, State, Rank)
x <- 1
}
else {
x <- num
}
dat.table[.(states.list, x), .(Hospital.Name, State)]
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure", 20), 10)
tail(rankall("heart failure", 20), 10)
head(rankall("heart attack", 20), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, State, Count, Hospital.Name)
dat.table[, Rank :=1:.N, by = State]
# Finally, use the num defined in the function to get the hospital for each
# required rank
setkey(dat.table, State, Rank)
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
x <- 1
}
if(num == "worst") {
dat.table[, Rank :=.N:1, by = State]
setkey(dat.table, State, Rank)
x <- 1
}
else {
x <- num
}
dat.table[.(states.list, x), .(Hospital.Name, State)]
}
submit()
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, state, Count, hospital)
dat.table[, Rank :=1:.N, by = state]
# Finally, use the num defined in the function to get the hospital for each
# required rank
setkey(dat.table, state, Rank)
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
x <- 1
}
if(num == "worst") {
dat.table[, Rank :=.N:1, by = state]
setkey(dat.table, state, Rank)
x <- 1
}
else {
x <- num
}
dat.table[.(states.list, x), .(hospital, state)]
}
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, state, Count, hospital)
dat.table[, Rank :=1:.N, by = state]
# Finally, use the num defined in the function to get the hospital for each
# required rank
setkey(dat.table, state, Rank)
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
x <- 1
}
if(num == "worst") {
dat.table[, Rank :=.N:1, by = state]
setkey(dat.table, state, Rank)
x <- 1
}
else {
x <- num
}
dat.table[.(states.list, x), .(hospital, state)]
}
head(rankall("heart attack", 20), 10)
submit()
submit()
rm(list=ls())
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
colID = 3
states.list <- unique(dat$State)
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
dat.filtered
library(data.table)
dat.table <- data.table(dat.filtered)
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
dat.table
setkey(dat.table, state, Count, hospital)
dat.table
?by
dat.table[, Rank :=1:.N, by = state]
dat.table
dat.table[, RevRank :=1:.N, by = state]
dat.table
dat.table[, RevRank :=.N:1, by = state]
dat.table
setkey(dat.table, state, Rank)
x <- 1
dat.table[.(states.list, x), .(hospital, state)]
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, state, Count, hospital)
dat.table[, Rank :=1:.N, by = state]
dat.table[, RevRank :=.N:1, by = state]
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
setkey(dat.table, state, Rank)
x <- 1
}
if(num == "worst") {
setkey(dat.table, state, RevRank)
x <- 1
}
else {
setkey(dat.table, state, Rank)
x <- num
}
dat.table[.(states.list, x), .(hospital, state)]
}
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
rm(list=ls())
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, state, Count, hospital)
dat.table[, Rank :=1:.N, by = state]
dat.table[, RevRank :=.N:1, by = state]
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
setkey(dat.table, state, Rank)
x <- 1
}
if(num == "worst") {
setkey(dat.table, state, RevRank)
x <- 1
}
else {
setkey(dat.table, state, Rank)
x <- num
}
dat.table[.(states.list, x), .(hospital, state)]
}
tail(rankall("pneumonia", "worst"), 3)
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
colID = 5
states.list <- unique(dat$State)
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
setkey(dat.table, state, Count, hospital)
dat.table[, Rank :=1:.N, by = state]
dat.table[, RevRank :=.N:1, by = state]
dat.table
dat.table[state=="WY",]
dat.filtered[,colID]
colID = 5
dat.filtered[,colID]
dat.filtered[,3]
as.numeric(dat.filtered[,3])
dat.filtered[,3] <- as.numeric(dat.filtered[,3])
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
head(dat.filtered)
dat.filtered[,3] <- as.numeric(dat.filtered[,3])
head(dat.filtered)
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
setkey(dat.table, state, Count, hospital)
dat.table[, Rank :=1:.N, by = state]
dat.table[, RevRank :=.N:1, by = state]
dat.table[state=="WY",]
rankall <- function(outcome, num = "best") {
# Read outcome data
dat <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.string = c("Not Available"))
dat <- subset(dat, select = c(2, 7, 11, 17, 23))
# Check that outcome is valid
colID <- numeric()
if (outcome == "heart attack") {
colID = 3
} else if (outcome == "heart failure") {
colID = 4
} else if (outcome == "pneumonia") {
colID = 5
} else {
stop("invalid outcome")
}
# Get a unique list of States from the data frame for use later
states.list <- unique(dat$State)
# Now reduce the data set to only the column we need based on outcome
# and remove NAs
dat.filtered <- dat[!is.na(dat[,colID]),c(1,2,colID)]
# Change the column type of "Count" to be numeric
dat.filtered[,3] <- as.numeric(dat.filtered[,3])
# Now we can move this into a data.table
library(data.table)
dat.table <- data.table(dat.filtered)
# Renaming a column so we can access it easier
setnames(dat.table, 1, "hospital")
setnames(dat.table, 2, "state")
setnames(dat.table, 3, "Count")
# Now we can set a key and additional column called Rank based on the State
setkey(dat.table, state, Count, hospital)
dat.table[, Rank :=1:.N, by = state]
dat.table[, RevRank :=.N:1, by = state]
# Now define what "best" and "worst" mean in context of Rank
x <- integer()
if(num == "best") {
setkey(dat.table, state, Rank)
x <- 1
}
if(num == "worst") {
setkey(dat.table, state, RevRank)
x <- 1
}
else {
setkey(dat.table, state, Rank)
x <- num
}
dat.table[.(states.list, x), .(hospital, state)]
}
tail(rankall("pneumonia", "worst"), 3)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
