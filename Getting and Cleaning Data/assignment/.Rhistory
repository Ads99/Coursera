a <- available.packages()
a
head(rownames(a), 3)
head(rownames(a), 4)
head(rownames(a), 5)
install.packages("slidify")
install.packages(c("slidify", "ggplot2", "devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
search()
find.package("devtools")
library(devtools)
install.packages("KernSmooth")
library(kernsmooth)
library(KernSmooth)
install.packages("RMySQL")
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
print cran
cran
group_by?
?group_by
by_pacakge <- group_by(cran, package)
by_package <- group_by(cran, package)
cran
by_package
summarize(by_package, mean(size))
submit()
pacl_sum
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
?spread
submit()
submit()
submit()
submit()
skip()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failes %>% mutate(status = "failed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
submit()
submit()
submit()
quit()
rm(list = ls())
R.version.string
library(swirl)
swirl()
R.version.string
install_from_swirl("R Programming")
swirl()
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
exit
exit()
quit()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Adam")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vext <- c(foo = 11, bar = 2, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_Vector
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
quit()
x <- 4L
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
class(cbind(x,y))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4
y <- 2
x + y
x <- c(3, 5, 1, 10, 12, 6)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
!(5 == 7)
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_Vect)
class(cls_vect)
0
info()
main()
quit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
class(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
quit()
rm(list = ls())
setwd('C://Users//ABaker//Documents//GitHub//Coursera//Getting and Cleaning Data//assignment')
features <- read.table("./UCI HAR Dataset/features.txt", header = FALSE, col.names=c("Feature.ID", "Feature.Name"))
str(features)
head(features)
str(features)
test_subject <- read.table("./UCI HAR Dataset/test/subject_test.txt", col.names = c('subject_id'), header = FALSE)
test_X <- read.table("./UCI HAR Dataset/test/X_test.txt", col.names = features$Feature.Name, header = FALSE)
test_y = read.table("./UCI HAR Dataset/test/y_test.txt", col.names = c('activity_id'), header = FALSE)
train_subject = read.table("./UCI HAR Dataset/train/subject_train.txt", col.names = c('subject_id'), header = FALSE)
train_X = read.table("./UCI HAR Dataset/train/X_train.txt", col.names = features$Feature.Name, header = FALSE)
train_y = read.table("./UCI HAR Dataset/train/y_train.txt",  col.names = c('activity_id'), header = FALSE)
nrow(test_subject)    # 2947
nrow(test_X)          # 2947
nrow(test_y)          # 2947
nrow(train_subject)   # 7351
nrow(train_X)         # 7351
nrow(train_y)         # 7351
names(test_subject)
names(test_X)
names(test_y)
desired_col_names <- grep(".*mean\\(\\)|.*std\\(\\)", features$Feature.Name)
str(desired_col_names) # 66 columns
test_X <- test_X[, desired_col_names]
train_X <- train_X[, desired_col_names]
head(test_X)
test_X <- cbind(data_type = c('test'), test_subject, test_y, test_X)
train_X <- cbind(data_type = c('train'), train_subject, train_y, train_X)
nrow(test_X)    # 2947
nrow(train_X)   # 7352
X.data <- rbind(test_X, train_X)
names(X.data)
head(X.data)
nrow(X.data)    # 10299
activity.labels <- read.table("./UCI HAR Dataset/activity_labels.txt", col.names = c('activity_id', 'activity_label'), header = FALSE)
activity.labels
# factor
activity.labels$activity_label <- as.factor(activity.labels$activity_label)
X.data$activity_id <- factor(X.data$activity_id, levels = 1:6, labels = activity.labels$activity_label)
head(X.data)
names(X.data)
column.names <- colnames(X.data)
column.names <- gsub("\\.+mean\\.+", column.names, replacement="Mean")
column.names <- gsub("\\.+std\\.+", column.names, replacement="Std")
# Give short name a full explaination
column.names <- gsub("Mag", column.names, replacement="Magnitude")
column.names <- gsub("Acc", column.names, replacement="Accelerometer")
column.names <- gsub("Gyro", column.names, replacement="Gyroscope")
column.names
# Put back to X. file
colnames(X.data) <- column.names
head(X.data)
library(reshape2)
X.data
meltdata <- melt(X.data, id.vars = c("Activity", "Subject.ID"))
tidydata <- dcast(meltdata, Activity + Subject.ID ~ variable, mean)
head(meltdata)
?melt
head(X.data)
meltdata <- melt(X.data, id.vars = c("activity_id", "subject_id"))
head(meltdata)
tidydata <- dcast(meltdata, activity_id + subject_id ~ variable, mean)
head(meltdata)
table(tidydata$Subject.ID)
rm(list=lis())
rm(list=ls())
